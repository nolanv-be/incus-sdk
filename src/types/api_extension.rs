use serde::Deserialize;

#[derive(Deserialize, Debug)]
pub struct ApiExtension(String);
impl From<&str> for ApiExtension {
    fn from(value: &str) -> Self {
        ApiExtension(value.into())
    }
}

pub enum ApiExtensionType {
    StorageZfsRemoveSnapshots,
    ContainerHostShutdownTimeout,
    ContainerStopPriority,
    ContainerSyscallFiltering,
    AuthPki,
    ContainerLastUsedAt,
    Etag,
    Patch,
    UsbDevices,
    HttpsAllowedCredentials,
    ImageCompressionAlgorithm,
    DirectoryManipulation,
    ContainerCpuTime,
    StorageZfsUseRefquota,
    StorageLvmMountOptions,
    Network,
    ProfileUsedby,
    ContainerPush,
    ContainerExecRecording,
    CertificateUpdate,
    ContainerExecSignalHandling,
    GpuDevices,
    ContainerImageProperties,
    MigrationProgress,
    IdMap,
    NetworkFirewallFiltering,
    NetworkRoutes,
    Storage,
    FileDelete,
    FileAppend,
    NetworkDhcpExpiry,
    StorageLvmVgRename,
    StorageLvmThinpoolRename,
    NetworkVlan,
    ImageCreateAliases,
    ContainerStatelessCopy,
    ContainerOnlyMigration,
    StorageZfsCloneCopy,
    UnixDeviceRename,
    StorageLvmUseThinpool,
    StorageRsyncBwlimit,
    NetworkVxlanInterface,
    StorageBtrfsMountOptions,
    EntityDescription,
    ImageForceRefresh,
    StorageLvmLvResizing,
    IdMapBase,
    FileSymlinks,
    ContainerPushTarget,
    NetworkVlanPhysical,
    StorageImagesDelete,
    ContainerEditMetadata,
    ContainerSnapshotStatefulMigration,
    StorageDriverCeph,
    StorageCephUserName,
    ResourceLimits,
    StorageVolatileInitialSource,
    StorageCephForceOsdReuse,
    StorageBlockFilesystemBtrfs,
    Resources,
    KernelLimits,
    StorageApiVolumeRename,
    NetworkSriov,
    Console,
    RestrictDevIncus,
    MigrationPreCopy,
    Infiniband,
    DevIncusEvents,
    Proxy,
    NetworkDhcpGateway,
    FileGetSymlink,
    NetworkLeases,
    UnixDeviceHotplug,
    StorageApiLocalVolumeHandling,
    OperationDescription,
    Clustering,
    EventLifecycle,
    StorageApiRemoteVolumeHandling,
    NvidiaRuntime,
    ContainerMountPropagation,
    ContainerBackup,
    DevIncusImages,
    ContainerLocalCrossPoolHandling,
    ProxyUnix,
    ProxyUdp,
    ClusteringJoin,
    ProxyTcpUdpMultiPortHandling,
    NetworkState,
    ProxyUnixDacProperties,
    ContainerProtectionDelete,
    UnixPrivDrop,
    PprofHttp,
    ProxyHaproxyProtocol,
    NetworkHwaddr,
    ProxyNat,
    NetworkNatOrder,
    ContainerFull,
    BackupCompression,
    NvidiaRuntimeConfig,
    StorageApiVolumeSnapshots,
    StorageUnmapped,
    Projects,
    NetworkVxlanTtl,
    ContainerIncrementalCopy,
    UsbOptionalVendorid,
    SnapshotScheduling,
    SnapshotScheduleAliases,
    ContainerCopyProject,
    ClusteringServerAddress,
    ClusteringImageReplication,
    ContainerProtectionShift,
    SnapshotExpiry,
    ContainerBackupOverridePool,
    SnapshotExpiryCreation,
    NetworkLeasesLocation,
    ResourcesCpuSocket,
    ResourcesGpu,
    ResourcesNuma,
    KernelFeatures,
    IdMapCurrent,
    EventLocation,
    StorageApiRemoteVolumeSnapshots,
    NetworkNatAddress,
    ContainerNicRoutes,
    ClusterInternalCopy,
    SeccompNotify,
    LxcFeatures,
    ContainerNicIpvlan,
    NetworkVlanSriov,
    StorageCephfs,
    ContainerNicIpfilter,
    ResourcesV2,
    ContainerExecUserGroupCwd,
    ContainerSyscallIntercept,
    ContainerDiskShift,
    StorageShifted,
    ResourcesInfiniband,
    DaemonStorage,
    Instances,
    ImageTypes,
    ResourcesDiskSata,
    ClusteringRoles,
    ImagesExpiry,
    ResourcesNetworkFirmware,
    BackupCompressionAlgorithm,
    CephDataPoolName,
    ContainerSyscallInterceptMount,
    CompressionSquashfs,
    ContainerRawMount,
    ContainerNicRouted,
    ContainerSyscallInterceptMountFuse,
    ContainerDiskCeph,
    VirtualMachines,
    ImageProfiles,
    ClusteringArchitecture,
    ResourcesDiskId,
    StorageLvmStripes,
    VmBootPriority,
    UnixHotplugDevices,
    ApiFiltering,
    InstanceNicNetwork,
    ClusteringSizing,
    FirewallDriver,
    ProjectsLimits,
    ContainerSyscallInterceptHugetlbfs,
    LimitsHugepages,
    ContainerNicRoutedGateway,
    ProjectsRestrictions,
    CustomVolumeSnapshotExpiry,
    VolumeSnapshotScheduling,
    TrustCaCertificates,
    SnapshotDiskUsage,
    ClusteringEditRoles,
    ContainerNicRoutedHostAddress,
    ContainerNicIpvlanGateway,
    ResourcesUsbPci,
    ResourcesCpuThreadsNuma,
    ResourcesCpuCoreDie,
    ApiOs,
    ContainerNicRoutedHostTable,
    ContainerNicIpvlanHostTable,
    ContainerNicIpvlanMode,
    ResourcesSystem,
    ImagesPushRelay,
    NetworkDnsSearch,
    ContainerNicRoutedLimits,
    InstanceNicBridgedVlan,
    NetworkStateBondBridge,
    UsedbyConsistency,
    CustomBlockVolumes,
    ClusteringFailureDomains,
    ResourcesGpuMdev,
    ConsoleVgaType,
    ProjectsLimitsDisk,
    NetworkTypeMacvlan,
    NetworkTypeSriov,
    ContainerSyscallInterceptBpfDevices,
    NetworkTypeOvn,
    ProjectsNetworks,
    ProjectsNetworksRestrictedUplinks,
    CustomVolumeBackup,
    BackupOverrideName,
    StorageRsyncCompression,
    NetworkTypePhysical,
    NetworkOvnExternalSubnets,
    NetworkOvnNat,
    NetworkOvnExternalRoutesRemove,
    TpmDeviceType,
    StorageZfsCloneCopyRebase,
    GpuMdev,
    ResourcesPciIommu,
    ResourcesNetworkUsb,
    ResourcesDiskAddress,
    NetworkPhysicalOvnIngressMode,
    NetworkOvnDhcp,
    NetworkPhysicalRoutesAnycast,
    ProjectsLimitsInstances,
    NetworkStateVlan,
    InstanceNicBridgedPortIsolation,
    InstanceBulkStateChange,
    NetworkGvrp,
    InstancePoolMove,
    GpuSriov,
    PciDeviceType,
    StorageVolumeState,
    NetworkAcl,
    MigrationStateful,
    DiskStateQuota,
    StorageCephFeatures,
    ProjectsCompression,
    ProjectsImagesRemoteCacheExpiry,
    CertificateProject,
    NetworkOvnAcl,
    ProjectsImagesAutoUpdate,
    ProjectsRestrictedClusterTarget,
    ImagesDefaultArchitecture,
    NetworkOvnAclDefaults,
    GpuMig,
    ProjectUsage,
    NetworkBridgeAcl,
    Warnings,
    ProjectsRestrictedBackupsAndSnapshots,
    ClusteringJoinToken,
    ClusteringDescription,
    ServerTrustedProxy,
    ClusteringUpdateCert,
    StorageApiProject,
    ServerInstanceDriverOperational,
    ServerSupportedStorageDrivers,
    EventLifecycleRequestorAddress,
    ResourcesGpuUsb,
    ClusteringEvacuation,
    NetworkOvnNatAddress,
    NetworkBgp,
    NetworkForward,
    CustomVolumeRefresh,
    NetworkCountersErrorsDropped,
    Metrics,
    ImageSourceProject,
    ClusteringConfig,
    NetworkPeer,
    LinuxSysctl,
    NetworkDns,
    OvnNicAcceleration,
    CertificateSelfRenewal,
    InstanceProjectMove,
    StorageVolumeProjectMove,
    CloudInit,
    NetworkDnsNat,
    DatabaseLeader,
    InstanceAllProjects,
    ClusteringGroups,
    CephRbdDu,
    InstanceGetFull,
    QemuMetrics,
    GpuMigUuid,
    EventProject,
    ClusteringEvacuationLive,
    InstanceAllowInconsistentCopy,
    NetworkStateOvn,
    StorageVolumeApiFiltering,
    ImageRestrictions,
    StorageZfsExport,
    NetworkDnsRecords,
    StorageZfsReserveSpace,
    NetworkAclLog,
    StorageZfsBlocksize,
    MetricsCpuSeconds,
    InstanceSnapshotNever,
    CertificateToken,
    InstanceNicRoutedNeighborProbe,
    EventHub,
    AgentNicConfig,
    ProjectsRestrictedIntercept,
    MetricsAuthentication,
    ImagesTargetProject,
    ImagesAllProjects,
    ClusterMigrationInconsistentCopy,
    ClusterOvnChassis,
    ContainerSyscallInterceptSchedSetscheduler,
    StorageLvmThinpoolMetadataSize,
    StorageVolumeStateTotal,
    InstanceFileHead,
    InstancesNicHostName,
    ImageCopyProfile,
    ContainerSyscallInterceptSysinfo,
    ClusteringEvacuationMode,
    ResourcesPciVpd,
    QemuRawConf,
    StorageCephfsFscache,
    NetworkLoadBalancer,
    VsockApi,
    InstanceReadyState,
    NetworkBgpHoldtime,
    StorageVolumesAllProjects,
    MetricsMemoryOomTotal,
    StorageBuckets,
    StorageBucketsCreateCredentials,
    MetricsCpuEffectiveTotal,
    ProjectsNetworksRestrictedAccess,
    StorageBucketsLocal,
    Loki,
    Acme,
    InternalMetrics,
    ClusterJoinTokenExpiry,
    RemoteTokenExpiry,
    InitPreseed,
    StorageVolumesCreatedAt,
    CpuHotplug,
    ProjectsNetworksZones,
    NetworkTxqueuelen,
    ClusterMemberState,
    InstancesPlacementScriptlet,
    StoragePoolSourceWipe,
    ZfsBlockMode,
    InstanceGenerationId,
    DiskIoCache,
    AmdSev,
    StoragePoolLoopResize,
    MigrationVmLive,
    OvnNicNesting,
    Oidc,
    NetworkOvnL3only,
    OvnNicAccelerationVdpa,
    ClusterHealing,
    InstancesStateTotal,
    AuthUser,
    SecurityCsm,
    InstancesRebuild,
    NumaCpuPlacement,
    CustomVolumeIso,
    NetworkAllocations,
    ZfsDelegate,
    StorageApiRemoteVolumeSnapshotCopy,
    OperationsGetQueryAllProjects,
    MetadataConfiguration,
    SyslogSocket,
    EventLifecycleNameAndProject,
    InstancesNicLimitsPriority,
    DiskInitialVolumeConfiguration,
    OperationWait,
    ImageRestrictionPrivileged,
    ClusterInternalCustomVolumeCopy,
    DiskIoBus,
    StorageCephfsCreateMissing,
    InstanceMoveConfig,
    OvnSslConfig,
    CertificateDescription,
    DiskIoBusVirtioBlk,
    LokiConfigInstance,
    InstanceCreateStart,
    ClusteringEvacuationStopOptions,
    BootHostShutdownAction,
    AgentConfigDrive,
    NetworkStateOvnLr,
    ImageTemplatePermissions,
    StorageBucketBackup,
    StorageLvmCluster,
    SharedCustomBlockVolumes,
    AuthTlsJwt,
    OidcClaim,
    DeviceUsbSerial,
    NumaCpuBalanced,
    ImageRestrictionNesting,
    NetworkIntegrations,
    InstanceMemorySwapBytes,
    NetworkBridgeExternalCreate,
    NetworkZonesAllProjects,
    StorageZfsVdev,
    ContainerMigrationStateful,
    ProfilesAllProjects,
    InstancesScriptletGetInstances,
    InstancesScriptletGetClusterMembers,
    InstancesScriptletGetProject,
    NetworkAclStateless,
    InstanceStateStartedAt,
    NetworksAllProjects,
    NetworkAclsAllProjects,
    StorageBucketsAllProjects,
    ResourcesLoad,
    InstanceAccess,
    ProjectAccess,
    ProjectsForceDelete,
    ResourcesCpuFlags,
    DiskIoBusCacheFilesystem,
    InstanceOci,
    ClusteringGroupsConfig,
    InstancesLxcfsPerInstance,
    ClusteringGroupsVmCpuDefinition,
    DiskVolumeSubpath,
    ProjectsLimitsDiskPool,
    NetworkOvnIsolated,
    QemuRawQmp,
    NetworkLoadBalancerHealthCheck,
    OidcScopes,
    NetworkIntegrationsPeerName,
    QemuScriptlet,
    InstanceAutoRestart,
    StorageLvmMetadatasize,
    OvnNicPromiscuous,
    OvnNicIpAddressNone,
    InstancesStateOsInfo,
    NetworkLoadBalancerState,
    InstanceNicMacvlanMode,
    StorageLvmClusterCreate,
    NetworkOvnExternalInterfaces,
    InstancesScriptletGetInstancesCount,
    ClusterRebalance,
    CustomVolumeRefreshExcludeOlderSnapshots,
    StorageInitialOwner,
    StorageLiveMigration,
    InstanceConsoleScreenshot,
    ImageImportAlias,
    AuthorizationScriptlet,
    ConsoleForce,
    NetworkOvnStateAddresses,
    NetworkBridgeAclDevices,
    InstanceDebugMemory,
    InitPreseedStorageVolumes,
    InitPreseedProfileProject,
    InstanceNicRoutedHostAddress,
    InstanceSmbios11,
    ApiFilteringExtended,
    AcmeDns01,
    SecurityIommu,
    NetworkIpv4DhcpRoutes,
    NetworkStateOvnLs,
    NetworkDnsNameservers,
    AcmeHttp01Port,
}
impl Into<ApiExtension> for ApiExtensionType {
    fn into(self) -> ApiExtension {
        match self {
            ApiExtensionType::StorageZfsRemoveSnapshots => "storage_zfs_remove_snapshots".into(),
            ApiExtensionType::ContainerHostShutdownTimeout => {
                "container_host_shutdown_timeout".into()
            }
            ApiExtensionType::ContainerStopPriority => "container_stop_priority".into(),
            ApiExtensionType::ContainerSyscallFiltering => "container_syscall_filtering".into(),
            ApiExtensionType::AuthPki => "auth_pki".into(),
            ApiExtensionType::ContainerLastUsedAt => "container_last_used_at".into(),
            ApiExtensionType::Etag => "etag".into(),
            ApiExtensionType::Patch => "patch".into(),
            ApiExtensionType::UsbDevices => "usb_devices".into(),
            ApiExtensionType::HttpsAllowedCredentials => "https_allowed_credentials".into(),
            ApiExtensionType::ImageCompressionAlgorithm => "image_compression_algorithm".into(),
            ApiExtensionType::DirectoryManipulation => "directory_manipulation".into(),
            ApiExtensionType::ContainerCpuTime => "container_cpu_time".into(),
            ApiExtensionType::StorageZfsUseRefquota => "storage_zfs_use_refquota".into(),
            ApiExtensionType::StorageLvmMountOptions => "storage_lvm_mount_options".into(),
            ApiExtensionType::Network => "network".into(),
            ApiExtensionType::ProfileUsedby => "profile_usedby".into(),
            ApiExtensionType::ContainerPush => "container_push".into(),
            ApiExtensionType::ContainerExecRecording => "container_exec_recording".into(),
            ApiExtensionType::CertificateUpdate => "certificate_update".into(),
            ApiExtensionType::ContainerExecSignalHandling => {
                "container_exec_signal_handling".into()
            }
            ApiExtensionType::GpuDevices => "gpu_devices".into(),
            ApiExtensionType::ContainerImageProperties => "container_image_properties".into(),
            ApiExtensionType::MigrationProgress => "migration_progress".into(),
            ApiExtensionType::IdMap => "id_map".into(),
            ApiExtensionType::NetworkFirewallFiltering => "network_firewall_filtering".into(),
            ApiExtensionType::NetworkRoutes => "network_routes".into(),
            ApiExtensionType::Storage => "storage".into(),
            ApiExtensionType::FileDelete => "file_delete".into(),
            ApiExtensionType::FileAppend => "file_append".into(),
            ApiExtensionType::NetworkDhcpExpiry => "network_dhcp_expiry".into(),
            ApiExtensionType::StorageLvmVgRename => "storage_lvm_vg_rename".into(),
            ApiExtensionType::StorageLvmThinpoolRename => "storage_lvm_thinpool_rename".into(),
            ApiExtensionType::NetworkVlan => "network_vlan".into(),
            ApiExtensionType::ImageCreateAliases => "image_create_aliases".into(),
            ApiExtensionType::ContainerStatelessCopy => "container_stateless_copy".into(),
            ApiExtensionType::ContainerOnlyMigration => "container_only_migration".into(),
            ApiExtensionType::StorageZfsCloneCopy => "storage_zfs_clone_copy".into(),
            ApiExtensionType::UnixDeviceRename => "unix_device_rename".into(),
            ApiExtensionType::StorageLvmUseThinpool => "storage_lvm_use_thinpool".into(),
            ApiExtensionType::StorageRsyncBwlimit => "storage_rsync_bwlimit".into(),
            ApiExtensionType::NetworkVxlanInterface => "network_vxlan_interface".into(),
            ApiExtensionType::StorageBtrfsMountOptions => "storage_btrfs_mount_options".into(),
            ApiExtensionType::EntityDescription => "entity_description".into(),
            ApiExtensionType::ImageForceRefresh => "image_force_refresh".into(),
            ApiExtensionType::StorageLvmLvResizing => "storage_lvm_lv_resizing".into(),
            ApiExtensionType::IdMapBase => "id_map_base".into(),
            ApiExtensionType::FileSymlinks => "file_symlinks".into(),
            ApiExtensionType::ContainerPushTarget => "container_push_target".into(),
            ApiExtensionType::NetworkVlanPhysical => "network_vlan_physical".into(),
            ApiExtensionType::StorageImagesDelete => "storage_images_delete".into(),
            ApiExtensionType::ContainerEditMetadata => "container_edit_metadata".into(),
            ApiExtensionType::ContainerSnapshotStatefulMigration => {
                "container_snapshot_stateful_migration".into()
            }
            ApiExtensionType::StorageDriverCeph => "storage_driver_ceph".into(),
            ApiExtensionType::StorageCephUserName => "storage_ceph_user_name".into(),
            ApiExtensionType::ResourceLimits => "resource_limits".into(),
            ApiExtensionType::StorageVolatileInitialSource => {
                "storage_volatile_initial_source".into()
            }
            ApiExtensionType::StorageCephForceOsdReuse => "storage_ceph_force_osd_reuse".into(),
            ApiExtensionType::StorageBlockFilesystemBtrfs => {
                "storage_block_filesystem_btrfs".into()
            }
            ApiExtensionType::Resources => "resources".into(),
            ApiExtensionType::KernelLimits => "kernel_limits".into(),
            ApiExtensionType::StorageApiVolumeRename => "storage_api_volume_rename".into(),
            ApiExtensionType::NetworkSriov => "network_sriov".into(),
            ApiExtensionType::Console => "console".into(),
            ApiExtensionType::RestrictDevIncus => "restrict_dev_incus".into(),
            ApiExtensionType::MigrationPreCopy => "migration_pre_copy".into(),
            ApiExtensionType::Infiniband => "infiniband".into(),
            ApiExtensionType::DevIncusEvents => "dev_incus_events".into(),
            ApiExtensionType::Proxy => "proxy".into(),
            ApiExtensionType::NetworkDhcpGateway => "network_dhcp_gateway".into(),
            ApiExtensionType::FileGetSymlink => "file_get_symlink".into(),
            ApiExtensionType::NetworkLeases => "network_leases".into(),
            ApiExtensionType::UnixDeviceHotplug => "unix_device_hotplug".into(),
            ApiExtensionType::StorageApiLocalVolumeHandling => {
                "storage_api_local_volume_handling".into()
            }
            ApiExtensionType::OperationDescription => "operation_description".into(),
            ApiExtensionType::Clustering => "clustering".into(),
            ApiExtensionType::EventLifecycle => "event_lifecycle".into(),
            ApiExtensionType::StorageApiRemoteVolumeHandling => {
                "storage_api_remote_volume_handling".into()
            }
            ApiExtensionType::NvidiaRuntime => "nvidia_runtime".into(),
            ApiExtensionType::ContainerMountPropagation => "container_mount_propagation".into(),
            ApiExtensionType::ContainerBackup => "container_backup".into(),
            ApiExtensionType::DevIncusImages => "dev_incus_images".into(),
            ApiExtensionType::ContainerLocalCrossPoolHandling => {
                "container_local_cross_pool_handling".into()
            }
            ApiExtensionType::ProxyUnix => "proxy_unix".into(),
            ApiExtensionType::ProxyUdp => "proxy_udp".into(),
            ApiExtensionType::ClusteringJoin => "clustering_join".into(),
            ApiExtensionType::ProxyTcpUdpMultiPortHandling => {
                "proxy_tcp_udp_multi_port_handling".into()
            }
            ApiExtensionType::NetworkState => "network_state".into(),
            ApiExtensionType::ProxyUnixDacProperties => "proxy_unix_dac_properties".into(),
            ApiExtensionType::ContainerProtectionDelete => "container_protection_delete".into(),
            ApiExtensionType::UnixPrivDrop => "unix_priv_drop".into(),
            ApiExtensionType::PprofHttp => "pprof_http".into(),
            ApiExtensionType::ProxyHaproxyProtocol => "proxy_haproxy_protocol".into(),
            ApiExtensionType::NetworkHwaddr => "network_hwaddr".into(),
            ApiExtensionType::ProxyNat => "proxy_nat".into(),
            ApiExtensionType::NetworkNatOrder => "network_nat_order".into(),
            ApiExtensionType::ContainerFull => "container_full".into(),
            ApiExtensionType::BackupCompression => "backup_compression".into(),
            ApiExtensionType::NvidiaRuntimeConfig => "nvidia_runtime_config".into(),
            ApiExtensionType::StorageApiVolumeSnapshots => "storage_api_volume_snapshots".into(),
            ApiExtensionType::StorageUnmapped => "storage_unmapped".into(),
            ApiExtensionType::Projects => "projects".into(),
            ApiExtensionType::NetworkVxlanTtl => "network_vxlan_ttl".into(),
            ApiExtensionType::ContainerIncrementalCopy => "container_incremental_copy".into(),
            ApiExtensionType::UsbOptionalVendorid => "usb_optional_vendorid".into(),
            ApiExtensionType::SnapshotScheduling => "snapshot_scheduling".into(),
            ApiExtensionType::SnapshotScheduleAliases => "snapshot_schedule_aliases".into(),
            ApiExtensionType::ContainerCopyProject => "container_copy_project".into(),
            ApiExtensionType::ClusteringServerAddress => "clustering_server_address".into(),
            ApiExtensionType::ClusteringImageReplication => "clustering_image_replication".into(),
            ApiExtensionType::ContainerProtectionShift => "container_protection_shift".into(),
            ApiExtensionType::SnapshotExpiry => "snapshot_expiry".into(),
            ApiExtensionType::ContainerBackupOverridePool => {
                "container_backup_override_pool".into()
            }
            ApiExtensionType::SnapshotExpiryCreation => "snapshot_expiry_creation".into(),
            ApiExtensionType::NetworkLeasesLocation => "network_leases_location".into(),
            ApiExtensionType::ResourcesCpuSocket => "resources_cpu_socket".into(),
            ApiExtensionType::ResourcesGpu => "resources_gpu".into(),
            ApiExtensionType::ResourcesNuma => "resources_numa".into(),
            ApiExtensionType::KernelFeatures => "kernel_features".into(),
            ApiExtensionType::IdMapCurrent => "id_map_current".into(),
            ApiExtensionType::EventLocation => "event_location".into(),
            ApiExtensionType::StorageApiRemoteVolumeSnapshots => {
                "storage_api_remote_volume_snapshots".into()
            }
            ApiExtensionType::NetworkNatAddress => "network_nat_address".into(),
            ApiExtensionType::ContainerNicRoutes => "container_nic_routes".into(),
            ApiExtensionType::ClusterInternalCopy => "cluster_internal_copy".into(),
            ApiExtensionType::SeccompNotify => "seccomp_notify".into(),
            ApiExtensionType::LxcFeatures => "lxc_features".into(),
            ApiExtensionType::ContainerNicIpvlan => "container_nic_ipvlan".into(),
            ApiExtensionType::NetworkVlanSriov => "network_vlan_sriov".into(),
            ApiExtensionType::StorageCephfs => "storage_cephfs".into(),
            ApiExtensionType::ContainerNicIpfilter => "container_nic_ipfilter".into(),
            ApiExtensionType::ResourcesV2 => "resources_v2".into(),
            ApiExtensionType::ContainerExecUserGroupCwd => "container_exec_user_group_cwd".into(),
            ApiExtensionType::ContainerSyscallIntercept => "container_syscall_intercept".into(),
            ApiExtensionType::ContainerDiskShift => "container_disk_shift".into(),
            ApiExtensionType::StorageShifted => "storage_shifted".into(),
            ApiExtensionType::ResourcesInfiniband => "resources_infiniband".into(),
            ApiExtensionType::DaemonStorage => "daemon_storage".into(),
            ApiExtensionType::Instances => "instances".into(),
            ApiExtensionType::ImageTypes => "image_types".into(),
            ApiExtensionType::ResourcesDiskSata => "resources_disk_sata".into(),
            ApiExtensionType::ClusteringRoles => "clustering_roles".into(),
            ApiExtensionType::ImagesExpiry => "images_expiry".into(),
            ApiExtensionType::ResourcesNetworkFirmware => "resources_network_firmware".into(),
            ApiExtensionType::BackupCompressionAlgorithm => "backup_compression_algorithm".into(),
            ApiExtensionType::CephDataPoolName => "ceph_data_pool_name".into(),
            ApiExtensionType::ContainerSyscallInterceptMount => {
                "container_syscall_intercept_mount".into()
            }
            ApiExtensionType::CompressionSquashfs => "compression_squashfs".into(),
            ApiExtensionType::ContainerRawMount => "container_raw_mount".into(),
            ApiExtensionType::ContainerNicRouted => "container_nic_routed".into(),
            ApiExtensionType::ContainerSyscallInterceptMountFuse => {
                "container_syscall_intercept_mount_fuse".into()
            }
            ApiExtensionType::ContainerDiskCeph => "container_disk_ceph".into(),
            ApiExtensionType::VirtualMachines => "virtual-machines".into(),
            ApiExtensionType::ImageProfiles => "image_profiles".into(),
            ApiExtensionType::ClusteringArchitecture => "clustering_architecture".into(),
            ApiExtensionType::ResourcesDiskId => "resources_disk_id".into(),
            ApiExtensionType::StorageLvmStripes => "storage_lvm_stripes".into(),
            ApiExtensionType::VmBootPriority => "vm_boot_priority".into(),
            ApiExtensionType::UnixHotplugDevices => "unix_hotplug_devices".into(),
            ApiExtensionType::ApiFiltering => "api_filtering".into(),
            ApiExtensionType::InstanceNicNetwork => "instance_nic_network".into(),
            ApiExtensionType::ClusteringSizing => "clustering_sizing".into(),
            ApiExtensionType::FirewallDriver => "firewall_driver".into(),
            ApiExtensionType::ProjectsLimits => "projects_limits".into(),
            ApiExtensionType::ContainerSyscallInterceptHugetlbfs => {
                "container_syscall_intercept_hugetlbfs".into()
            }
            ApiExtensionType::LimitsHugepages => "limits_hugepages".into(),
            ApiExtensionType::ContainerNicRoutedGateway => "container_nic_routed_gateway".into(),
            ApiExtensionType::ProjectsRestrictions => "projects_restrictions".into(),
            ApiExtensionType::CustomVolumeSnapshotExpiry => "custom_volume_snapshot_expiry".into(),
            ApiExtensionType::VolumeSnapshotScheduling => "volume_snapshot_scheduling".into(),
            ApiExtensionType::TrustCaCertificates => "trust_ca_certificates".into(),
            ApiExtensionType::SnapshotDiskUsage => "snapshot_disk_usage".into(),
            ApiExtensionType::ClusteringEditRoles => "clustering_edit_roles".into(),
            ApiExtensionType::ContainerNicRoutedHostAddress => {
                "container_nic_routed_host_address".into()
            }
            ApiExtensionType::ContainerNicIpvlanGateway => "container_nic_ipvlan_gateway".into(),
            ApiExtensionType::ResourcesUsbPci => "resources_usb_pci".into(),
            ApiExtensionType::ResourcesCpuThreadsNuma => "resources_cpu_threads_numa".into(),
            ApiExtensionType::ResourcesCpuCoreDie => "resources_cpu_core_die".into(),
            ApiExtensionType::ApiOs => "api_os".into(),
            ApiExtensionType::ContainerNicRoutedHostTable => {
                "container_nic_routed_host_table".into()
            }
            ApiExtensionType::ContainerNicIpvlanHostTable => {
                "container_nic_ipvlan_host_table".into()
            }
            ApiExtensionType::ContainerNicIpvlanMode => "container_nic_ipvlan_mode".into(),
            ApiExtensionType::ResourcesSystem => "resources_system".into(),
            ApiExtensionType::ImagesPushRelay => "images_push_relay".into(),
            ApiExtensionType::NetworkDnsSearch => "network_dns_search".into(),
            ApiExtensionType::ContainerNicRoutedLimits => "container_nic_routed_limits".into(),
            ApiExtensionType::InstanceNicBridgedVlan => "instance_nic_bridged_vlan".into(),
            ApiExtensionType::NetworkStateBondBridge => "network_state_bond_bridge".into(),
            ApiExtensionType::UsedbyConsistency => "usedby_consistency".into(),
            ApiExtensionType::CustomBlockVolumes => "custom_block_volumes".into(),
            ApiExtensionType::ClusteringFailureDomains => "clustering_failure_domains".into(),
            ApiExtensionType::ResourcesGpuMdev => "resources_gpu_mdev".into(),
            ApiExtensionType::ConsoleVgaType => "console_vga_type".into(),
            ApiExtensionType::ProjectsLimitsDisk => "projects_limits_disk".into(),
            ApiExtensionType::NetworkTypeMacvlan => "network_type_macvlan".into(),
            ApiExtensionType::NetworkTypeSriov => "network_type_sriov".into(),
            ApiExtensionType::ContainerSyscallInterceptBpfDevices => {
                "container_syscall_intercept_bpf_devices".into()
            }
            ApiExtensionType::NetworkTypeOvn => "network_type_ovn".into(),
            ApiExtensionType::ProjectsNetworks => "projects_networks".into(),
            ApiExtensionType::ProjectsNetworksRestrictedUplinks => {
                "projects_networks_restricted_uplinks".into()
            }
            ApiExtensionType::CustomVolumeBackup => "custom_volume_backup".into(),
            ApiExtensionType::BackupOverrideName => "backup_override_name".into(),
            ApiExtensionType::StorageRsyncCompression => "storage_rsync_compression".into(),
            ApiExtensionType::NetworkTypePhysical => "network_type_physical".into(),
            ApiExtensionType::NetworkOvnExternalSubnets => "network_ovn_external_subnets".into(),
            ApiExtensionType::NetworkOvnNat => "network_ovn_nat".into(),
            ApiExtensionType::NetworkOvnExternalRoutesRemove => {
                "network_ovn_external_routes_remove".into()
            }
            ApiExtensionType::TpmDeviceType => "tpm_device_type".into(),
            ApiExtensionType::StorageZfsCloneCopyRebase => "storage_zfs_clone_copy_rebase".into(),
            ApiExtensionType::GpuMdev => "gpu_mdev".into(),
            ApiExtensionType::ResourcesPciIommu => "resources_pci_iommu".into(),
            ApiExtensionType::ResourcesNetworkUsb => "resources_network_usb".into(),
            ApiExtensionType::ResourcesDiskAddress => "resources_disk_address".into(),
            ApiExtensionType::NetworkPhysicalOvnIngressMode => {
                "network_physical_ovn_ingress_mode".into()
            }
            ApiExtensionType::NetworkOvnDhcp => "network_ovn_dhcp".into(),
            ApiExtensionType::NetworkPhysicalRoutesAnycast => {
                "network_physical_routes_anycast".into()
            }
            ApiExtensionType::ProjectsLimitsInstances => "projects_limits_instances".into(),
            ApiExtensionType::NetworkStateVlan => "network_state_vlan".into(),
            ApiExtensionType::InstanceNicBridgedPortIsolation => {
                "instance_nic_bridged_port_isolation".into()
            }
            ApiExtensionType::InstanceBulkStateChange => "instance_bulk_state_change".into(),
            ApiExtensionType::NetworkGvrp => "network_gvrp".into(),
            ApiExtensionType::InstancePoolMove => "instance_pool_move".into(),
            ApiExtensionType::GpuSriov => "gpu_sriov".into(),
            ApiExtensionType::PciDeviceType => "pci_device_type".into(),
            ApiExtensionType::StorageVolumeState => "storage_volume_state".into(),
            ApiExtensionType::NetworkAcl => "network_acl".into(),
            ApiExtensionType::MigrationStateful => "migration_stateful".into(),
            ApiExtensionType::DiskStateQuota => "disk_state_quota".into(),
            ApiExtensionType::StorageCephFeatures => "storage_ceph_features".into(),
            ApiExtensionType::ProjectsCompression => "projects_compression".into(),
            ApiExtensionType::ProjectsImagesRemoteCacheExpiry => {
                "projects_images_remote_cache_expiry".into()
            }
            ApiExtensionType::CertificateProject => "certificate_project".into(),
            ApiExtensionType::NetworkOvnAcl => "network_ovn_acl".into(),
            ApiExtensionType::ProjectsImagesAutoUpdate => "projects_images_auto_update".into(),
            ApiExtensionType::ProjectsRestrictedClusterTarget => {
                "projects_restricted_cluster_target".into()
            }
            ApiExtensionType::ImagesDefaultArchitecture => "images_default_architecture".into(),
            ApiExtensionType::NetworkOvnAclDefaults => "network_ovn_acl_defaults".into(),
            ApiExtensionType::GpuMig => "gpu_mig".into(),
            ApiExtensionType::ProjectUsage => "project_usage".into(),
            ApiExtensionType::NetworkBridgeAcl => "network_bridge_acl".into(),
            ApiExtensionType::Warnings => "warnings".into(),
            ApiExtensionType::ProjectsRestrictedBackupsAndSnapshots => {
                "projects_restricted_backups_and_snapshots".into()
            }
            ApiExtensionType::ClusteringJoinToken => "clustering_join_token".into(),
            ApiExtensionType::ClusteringDescription => "clustering_description".into(),
            ApiExtensionType::ServerTrustedProxy => "server_trusted_proxy".into(),
            ApiExtensionType::ClusteringUpdateCert => "clustering_update_cert".into(),
            ApiExtensionType::StorageApiProject => "storage_api_project".into(),
            ApiExtensionType::ServerInstanceDriverOperational => {
                "server_instance_driver_operational".into()
            }
            ApiExtensionType::ServerSupportedStorageDrivers => {
                "server_supported_storage_drivers".into()
            }
            ApiExtensionType::EventLifecycleRequestorAddress => {
                "event_lifecycle_requestor_address".into()
            }
            ApiExtensionType::ResourcesGpuUsb => "resources_gpu_usb".into(),
            ApiExtensionType::ClusteringEvacuation => "clustering_evacuation".into(),
            ApiExtensionType::NetworkOvnNatAddress => "network_ovn_nat_address".into(),
            ApiExtensionType::NetworkBgp => "network_bgp".into(),
            ApiExtensionType::NetworkForward => "network_forward".into(),
            ApiExtensionType::CustomVolumeRefresh => "custom_volume_refresh".into(),
            ApiExtensionType::NetworkCountersErrorsDropped => {
                "network_counters_errors_dropped".into()
            }
            ApiExtensionType::Metrics => "metrics".into(),
            ApiExtensionType::ImageSourceProject => "image_source_project".into(),
            ApiExtensionType::ClusteringConfig => "clustering_config".into(),
            ApiExtensionType::NetworkPeer => "network_peer".into(),
            ApiExtensionType::LinuxSysctl => "linux_sysctl".into(),
            ApiExtensionType::NetworkDns => "network_dns".into(),
            ApiExtensionType::OvnNicAcceleration => "ovn_nic_acceleration".into(),
            ApiExtensionType::CertificateSelfRenewal => "certificate_self_renewal".into(),
            ApiExtensionType::InstanceProjectMove => "instance_project_move".into(),
            ApiExtensionType::StorageVolumeProjectMove => "storage_volume_project_move".into(),
            ApiExtensionType::CloudInit => "cloud_init".into(),
            ApiExtensionType::NetworkDnsNat => "network_dns_nat".into(),
            ApiExtensionType::DatabaseLeader => "database_leader".into(),
            ApiExtensionType::InstanceAllProjects => "instance_all_projects".into(),
            ApiExtensionType::ClusteringGroups => "clustering_groups".into(),
            ApiExtensionType::CephRbdDu => "ceph_rbd_du".into(),
            ApiExtensionType::InstanceGetFull => "instance_get_full".into(),
            ApiExtensionType::QemuMetrics => "qemu_metrics".into(),
            ApiExtensionType::GpuMigUuid => "gpu_mig_uuid".into(),
            ApiExtensionType::EventProject => "event_project".into(),
            ApiExtensionType::ClusteringEvacuationLive => "clustering_evacuation_live".into(),
            ApiExtensionType::InstanceAllowInconsistentCopy => {
                "instance_allow_inconsistent_copy".into()
            }
            ApiExtensionType::NetworkStateOvn => "network_state_ovn".into(),
            ApiExtensionType::StorageVolumeApiFiltering => "storage_volume_api_filtering".into(),
            ApiExtensionType::ImageRestrictions => "image_restrictions".into(),
            ApiExtensionType::StorageZfsExport => "storage_zfs_export".into(),
            ApiExtensionType::NetworkDnsRecords => "network_dns_records".into(),
            ApiExtensionType::StorageZfsReserveSpace => "storage_zfs_reserve_space".into(),
            ApiExtensionType::NetworkAclLog => "network_acl_log".into(),
            ApiExtensionType::StorageZfsBlocksize => "storage_zfs_blocksize".into(),
            ApiExtensionType::MetricsCpuSeconds => "metrics_cpu_seconds".into(),
            ApiExtensionType::InstanceSnapshotNever => "instance_snapshot_never".into(),
            ApiExtensionType::CertificateToken => "certificate_token".into(),
            ApiExtensionType::InstanceNicRoutedNeighborProbe => {
                "instance_nic_routed_neighbor_probe".into()
            }
            ApiExtensionType::EventHub => "event_hub".into(),
            ApiExtensionType::AgentNicConfig => "agent_nic_config".into(),
            ApiExtensionType::ProjectsRestrictedIntercept => "projects_restricted_intercept".into(),
            ApiExtensionType::MetricsAuthentication => "metrics_authentication".into(),
            ApiExtensionType::ImagesTargetProject => "images_target_project".into(),
            ApiExtensionType::ImagesAllProjects => "images_all_projects".into(),
            ApiExtensionType::ClusterMigrationInconsistentCopy => {
                "cluster_migration_inconsistent_copy".into()
            }
            ApiExtensionType::ClusterOvnChassis => "cluster_ovn_chassis".into(),
            ApiExtensionType::ContainerSyscallInterceptSchedSetscheduler => {
                "container_syscall_intercept_sched_setscheduler".into()
            }
            ApiExtensionType::StorageLvmThinpoolMetadataSize => {
                "storage_lvm_thinpool_metadata_size".into()
            }
            ApiExtensionType::StorageVolumeStateTotal => "storage_volume_state_total".into(),
            ApiExtensionType::InstanceFileHead => "instance_file_head".into(),
            ApiExtensionType::InstancesNicHostName => "instances_nic_host_name".into(),
            ApiExtensionType::ImageCopyProfile => "image_copy_profile".into(),
            ApiExtensionType::ContainerSyscallInterceptSysinfo => {
                "container_syscall_intercept_sysinfo".into()
            }
            ApiExtensionType::ClusteringEvacuationMode => "clustering_evacuation_mode".into(),
            ApiExtensionType::ResourcesPciVpd => "resources_pci_vpd".into(),
            ApiExtensionType::QemuRawConf => "qemu_raw_conf".into(),
            ApiExtensionType::StorageCephfsFscache => "storage_cephfs_fscache".into(),
            ApiExtensionType::NetworkLoadBalancer => "network_load_balancer".into(),
            ApiExtensionType::VsockApi => "vsock_api".into(),
            ApiExtensionType::InstanceReadyState => "instance_ready_state".into(),
            ApiExtensionType::NetworkBgpHoldtime => "network_bgp_holdtime".into(),
            ApiExtensionType::StorageVolumesAllProjects => "storage_volumes_all_projects".into(),
            ApiExtensionType::MetricsMemoryOomTotal => "metrics_memory_oom_total".into(),
            ApiExtensionType::StorageBuckets => "storage_buckets".into(),
            ApiExtensionType::StorageBucketsCreateCredentials => {
                "storage_buckets_create_credentials".into()
            }
            ApiExtensionType::MetricsCpuEffectiveTotal => "metrics_cpu_effective_total".into(),
            ApiExtensionType::ProjectsNetworksRestrictedAccess => {
                "projects_networks_restricted_access".into()
            }
            ApiExtensionType::StorageBucketsLocal => "storage_buckets_local".into(),
            ApiExtensionType::Loki => "loki".into(),
            ApiExtensionType::Acme => "acme".into(),
            ApiExtensionType::InternalMetrics => "internal_metrics".into(),
            ApiExtensionType::ClusterJoinTokenExpiry => "cluster_join_token_expiry".into(),
            ApiExtensionType::RemoteTokenExpiry => "remote_token_expiry".into(),
            ApiExtensionType::InitPreseed => "init_preseed".into(),
            ApiExtensionType::StorageVolumesCreatedAt => "storage_volumes_created_at".into(),
            ApiExtensionType::CpuHotplug => "cpu_hotplug".into(),
            ApiExtensionType::ProjectsNetworksZones => "projects_networks_zones".into(),
            ApiExtensionType::NetworkTxqueuelen => "network_txqueuelen".into(),
            ApiExtensionType::ClusterMemberState => "cluster_member_state".into(),
            ApiExtensionType::InstancesPlacementScriptlet => "instances_placement_scriptlet".into(),
            ApiExtensionType::StoragePoolSourceWipe => "storage_pool_source_wipe".into(),
            ApiExtensionType::ZfsBlockMode => "zfs_block_mode".into(),
            ApiExtensionType::InstanceGenerationId => "instance_generation_id".into(),
            ApiExtensionType::DiskIoCache => "disk_io_cache".into(),
            ApiExtensionType::AmdSev => "amd_sev".into(),
            ApiExtensionType::StoragePoolLoopResize => "storage_pool_loop_resize".into(),
            ApiExtensionType::MigrationVmLive => "migration_vm_live".into(),
            ApiExtensionType::OvnNicNesting => "ovn_nic_nesting".into(),
            ApiExtensionType::Oidc => "oidc".into(),
            ApiExtensionType::NetworkOvnL3only => "network_ovn_l3only".into(),
            ApiExtensionType::OvnNicAccelerationVdpa => "ovn_nic_acceleration_vdpa".into(),
            ApiExtensionType::ClusterHealing => "cluster_healing".into(),
            ApiExtensionType::InstancesStateTotal => "instances_state_total".into(),
            ApiExtensionType::AuthUser => "auth_user".into(),
            ApiExtensionType::SecurityCsm => "security_csm".into(),
            ApiExtensionType::InstancesRebuild => "instances_rebuild".into(),
            ApiExtensionType::NumaCpuPlacement => "numa_cpu_placement".into(),
            ApiExtensionType::CustomVolumeIso => "custom_volume_iso".into(),
            ApiExtensionType::NetworkAllocations => "network_allocations".into(),
            ApiExtensionType::ZfsDelegate => "zfs_delegate".into(),
            ApiExtensionType::StorageApiRemoteVolumeSnapshotCopy => {
                "storage_api_remote_volume_snapshot_copy".into()
            }
            ApiExtensionType::OperationsGetQueryAllProjects => {
                "operations_get_query_all_projects".into()
            }
            ApiExtensionType::MetadataConfiguration => "metadata_configuration".into(),
            ApiExtensionType::SyslogSocket => "syslog_socket".into(),
            ApiExtensionType::EventLifecycleNameAndProject => {
                "event_lifecycle_name_and_project".into()
            }
            ApiExtensionType::InstancesNicLimitsPriority => "instances_nic_limits_priority".into(),
            ApiExtensionType::DiskInitialVolumeConfiguration => {
                "disk_initial_volume_configuration".into()
            }
            ApiExtensionType::OperationWait => "operation_wait".into(),
            ApiExtensionType::ImageRestrictionPrivileged => "image_restriction_privileged".into(),
            ApiExtensionType::ClusterInternalCustomVolumeCopy => {
                "cluster_internal_custom_volume_copy".into()
            }
            ApiExtensionType::DiskIoBus => "disk_io_bus".into(),
            ApiExtensionType::StorageCephfsCreateMissing => "storage_cephfs_create_missing".into(),
            ApiExtensionType::InstanceMoveConfig => "instance_move_config".into(),
            ApiExtensionType::OvnSslConfig => "ovn_ssl_config".into(),
            ApiExtensionType::CertificateDescription => "certificate_description".into(),
            ApiExtensionType::DiskIoBusVirtioBlk => "disk_io_bus_virtio_blk".into(),
            ApiExtensionType::LokiConfigInstance => "loki_config_instance".into(),
            ApiExtensionType::InstanceCreateStart => "instance_create_start".into(),
            ApiExtensionType::ClusteringEvacuationStopOptions => {
                "clustering_evacuation_stop_options".into()
            }
            ApiExtensionType::BootHostShutdownAction => "boot_host_shutdown_action".into(),
            ApiExtensionType::AgentConfigDrive => "agent_config_drive".into(),
            ApiExtensionType::NetworkStateOvnLr => "network_state_ovn_lr".into(),
            ApiExtensionType::ImageTemplatePermissions => "image_template_permissions".into(),
            ApiExtensionType::StorageBucketBackup => "storage_bucket_backup".into(),
            ApiExtensionType::StorageLvmCluster => "storage_lvm_cluster".into(),
            ApiExtensionType::SharedCustomBlockVolumes => "shared_custom_block_volumes".into(),
            ApiExtensionType::AuthTlsJwt => "auth_tls_jwt".into(),
            ApiExtensionType::OidcClaim => "oidc_claim".into(),
            ApiExtensionType::DeviceUsbSerial => "device_usb_serial".into(),
            ApiExtensionType::NumaCpuBalanced => "numa_cpu_balanced".into(),
            ApiExtensionType::ImageRestrictionNesting => "image_restriction_nesting".into(),
            ApiExtensionType::NetworkIntegrations => "network_integrations".into(),
            ApiExtensionType::InstanceMemorySwapBytes => "instance_memory_swap_bytes".into(),
            ApiExtensionType::NetworkBridgeExternalCreate => {
                "network_bridge_external_create".into()
            }
            ApiExtensionType::NetworkZonesAllProjects => "network_zones_all_projects".into(),
            ApiExtensionType::StorageZfsVdev => "storage_zfs_vdev".into(),
            ApiExtensionType::ContainerMigrationStateful => "container_migration_stateful".into(),
            ApiExtensionType::ProfilesAllProjects => "profiles_all_projects".into(),
            ApiExtensionType::InstancesScriptletGetInstances => {
                "instances_scriptlet_get_instances".into()
            }
            ApiExtensionType::InstancesScriptletGetClusterMembers => {
                "instances_scriptlet_get_cluster_members".into()
            }
            ApiExtensionType::InstancesScriptletGetProject => {
                "instances_scriptlet_get_project".into()
            }
            ApiExtensionType::NetworkAclStateless => "network_acl_stateless".into(),
            ApiExtensionType::InstanceStateStartedAt => "instance_state_started_at".into(),
            ApiExtensionType::NetworksAllProjects => "networks_all_projects".into(),
            ApiExtensionType::NetworkAclsAllProjects => "network_acls_all_projects".into(),
            ApiExtensionType::StorageBucketsAllProjects => "storage_buckets_all_projects".into(),
            ApiExtensionType::ResourcesLoad => "resources_load".into(),
            ApiExtensionType::InstanceAccess => "instance_access".into(),
            ApiExtensionType::ProjectAccess => "project_access".into(),
            ApiExtensionType::ProjectsForceDelete => "projects_force_delete".into(),
            ApiExtensionType::ResourcesCpuFlags => "resources_cpu_flags".into(),
            ApiExtensionType::DiskIoBusCacheFilesystem => "disk_io_bus_cache_filesystem".into(),
            ApiExtensionType::InstanceOci => "instance_oci".into(),
            ApiExtensionType::ClusteringGroupsConfig => "clustering_groups_config".into(),
            ApiExtensionType::InstancesLxcfsPerInstance => "instances_lxcfs_per_instance".into(),
            ApiExtensionType::ClusteringGroupsVmCpuDefinition => {
                "clustering_groups_vm_cpu_definition".into()
            }
            ApiExtensionType::DiskVolumeSubpath => "disk_volume_subpath".into(),
            ApiExtensionType::ProjectsLimitsDiskPool => "projects_limits_disk_pool".into(),
            ApiExtensionType::NetworkOvnIsolated => "network_ovn_isolated".into(),
            ApiExtensionType::QemuRawQmp => "qemu_raw_qmp".into(),
            ApiExtensionType::NetworkLoadBalancerHealthCheck => {
                "network_load_balancer_health_check".into()
            }
            ApiExtensionType::OidcScopes => "oidc_scopes".into(),
            ApiExtensionType::NetworkIntegrationsPeerName => {
                "network_integrations_peer_name".into()
            }
            ApiExtensionType::QemuScriptlet => "qemu_scriptlet".into(),
            ApiExtensionType::InstanceAutoRestart => "instance_auto_restart".into(),
            ApiExtensionType::StorageLvmMetadatasize => "storage_lvm_metadatasize".into(),
            ApiExtensionType::OvnNicPromiscuous => "ovn_nic_promiscuous".into(),
            ApiExtensionType::OvnNicIpAddressNone => "ovn_nic_ip_address_none".into(),
            ApiExtensionType::InstancesStateOsInfo => "instances_state_os_info".into(),
            ApiExtensionType::NetworkLoadBalancerState => "network_load_balancer_state".into(),
            ApiExtensionType::InstanceNicMacvlanMode => "instance_nic_macvlan_mode".into(),
            ApiExtensionType::StorageLvmClusterCreate => "storage_lvm_cluster_create".into(),
            ApiExtensionType::NetworkOvnExternalInterfaces => {
                "network_ovn_external_interfaces".into()
            }
            ApiExtensionType::InstancesScriptletGetInstancesCount => {
                "instances_scriptlet_get_instances_count".into()
            }
            ApiExtensionType::ClusterRebalance => "cluster_rebalance".into(),
            ApiExtensionType::CustomVolumeRefreshExcludeOlderSnapshots => {
                "custom_volume_refresh_exclude_older_snapshots".into()
            }
            ApiExtensionType::StorageInitialOwner => "storage_initial_owner".into(),
            ApiExtensionType::StorageLiveMigration => "storage_live_migration".into(),
            ApiExtensionType::InstanceConsoleScreenshot => "instance_console_screenshot".into(),
            ApiExtensionType::ImageImportAlias => "image_import_alias".into(),
            ApiExtensionType::AuthorizationScriptlet => "authorization_scriptlet".into(),
            ApiExtensionType::ConsoleForce => "console_force".into(),
            ApiExtensionType::NetworkOvnStateAddresses => "network_ovn_state_addresses".into(),
            ApiExtensionType::NetworkBridgeAclDevices => "network_bridge_acl_devices".into(),
            ApiExtensionType::InstanceDebugMemory => "instance_debug_memory".into(),
            ApiExtensionType::InitPreseedStorageVolumes => "init_preseed_storage_volumes".into(),
            ApiExtensionType::InitPreseedProfileProject => "init_preseed_profile_project".into(),
            ApiExtensionType::InstanceNicRoutedHostAddress => {
                "instance_nic_routed_host_address".into()
            }
            ApiExtensionType::InstanceSmbios11 => "instance_smbios11".into(),
            ApiExtensionType::ApiFilteringExtended => "api_filtering_extended".into(),
            ApiExtensionType::AcmeDns01 => "acme_dns01".into(),
            ApiExtensionType::SecurityIommu => "security_iommu".into(),
            ApiExtensionType::NetworkIpv4DhcpRoutes => "network_ipv4_dhcp_routes".into(),
            ApiExtensionType::NetworkStateOvnLs => "network_state_ovn_ls".into(),
            ApiExtensionType::NetworkDnsNameservers => "network_dns_nameservers".into(),
            ApiExtensionType::AcmeHttp01Port => "acme_http01_port".into(),
        }
    }
}
